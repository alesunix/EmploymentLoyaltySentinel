@page "/offenders"
@attribute [Authorize]
@inject IJSRuntime JS

<div class="container-fluid position-fixed bg-light py-3 pt-5 border-start border-end border-bottom" style="z-index: 2;width: 85.5%;margin-top: -24px;">
    <div class="row">
        @if (!IsHide)
        {
            <div class="col btn-group" role="group">
                <button class="btn btn-primary me-2" @onclick="@Add"><i class="oi oi-credit-card pe-2"></i>Добавить</button>
                <button disabled="@IsNotFocused" class="btn btn-warning me-2" @onclick="@View"><i class="oi oi-credit-card pe-2"></i>Подробнее</button>
                <button disabled="@IsDisabled" class="btn btn-secondary me-2" @onclick="@Edit"><i class="oi oi-excerpt pe-2"></i>Изменить</button>
                <button disabled="@IsDisabled" class="@VisibleDel btn btn-danger me-2" @onclick="@Delete"><i class="oi oi-trash pe-2"></i>Удалить</button>
                <button disabled="@IsDisabled" class="@VisibleRec btn btn-info me-2" @onclick="@Recovery"><i class="oi oi-reload pe-2"></i>Восстановить</button>
            </div>
        }
        else
        {
            <div class="col">
                <button disabled="@IsNotFocused" class="btn btn-warning me-2" @onclick="@View"><i class="oi oi-credit-card pe-2"></i>Подробнее</button>
            </div>
        }
        <div class="col btn-group" role="group">
            <button class="btn btn-primary me-2" @onclick="@ExportExcel"><i class="oi oi-data-transfer-download pe-2"></i>Выгрузить</button>
            @if (Table != null && Table.Count != 0)
            {
                if (Table[0].Deleted == "F")
                {
                    <button class="btn btn-primary me-2 text-nowrap" style="width: 200px;" @onclick="@Reverse"><i class="oi oi-trash pe-2"></i>Показать удалённые</button>
                }
                else
                {
                    <button class="btn btn-primary me-2" style="width: 200px;" @onclick="@Reverse"><i class="oi oi-eye pe-2"></i>Показать активные</button>
                }
            }
            else
            {
                <button class="btn btn-primary me-2" style="width: 200px;" @onclick="@Reverse"><i class="oi oi-eye pe-2"></i>Показать активные</button>
            }
            <div class="col-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="oi oi-magnifying-glass"></i></span>
                    <input @bind-value="@SearchValue" class="form-control" placeholder="Поиск" @oninput="@FilterTable" @onkeypress="@KeyPress"></input>
                    <button @onclick="(()=>FilterTable(new ChangeEventArgs {Value=string.Empty}))" class="btn btn-secondary oi oi-x"></button>
                </div>
            </div>
        </div>
    </div>
</div>
<br />

<!--Offenders Table-->
<div @ref="@Reference" class="table-solid" style="margin-top: 50px;">
    <table class="table table-striped table-hover align-middle caption-top">
        <thead class="thead-primary position-sticky" style="z-index: 2;width: 85.4%;top:155px;">
            <tr>
                <th>ФИО</th>
                <th>Подразделение</th>
                <th>Нарушение</th>
                <th>Дата записи</th>
                <th>Статус</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Table == null)
            {
                <ToastNotification Data="Load" />
            }
            else if (Table.Count == 0)
            {
                <ToastNotification Data="NoData" />
            }
            else
            {
                foreach (OffendersModel item in Table)
                {
                    decimal id = item.Id;/// id

                    string bg = (id == SelectedId) ? "selected-row" : "";
                    <tr class="hover-row @bg" @onclick="@(()=>RowClicked(id))" @key="item">
                        <td hidden>@item.Id</td>
                        <td>@item.Employee</td>
                        <td hidden>@item.Dol</td>
                        <td hidden>@item.Dr</td>
                        <td hidden>@item.Dp</td>
                        <td>@item.Grpprgname</td>
                        <td style="max-width: 500px;">
                            @foreach (var offense in oModel.GetOffenses(id))
                            {
                                <span class="col-md-auto d-block text-truncate">@offense.Value</span>
                            }
                        </td>
                        <td hidden>@item.Summ</td>
                        <td hidden>@item.Cur</td>
                        <td hidden>@item.Loginid</td>
                        <td hidden>@item.Loginid_lastedit</td>
                        <td>@item.Date_record.ToShortDateString()</td>
                        <td hidden>@item.Date_lastedit</td>
                        <td>
                            @if (item.Status == "U")
                            {
                                <i class="oi oi-question-mark h5" style="color:#1a6fb3;"></i>
                            }
                            else if (item.Status == "F")
                            {
                                <i class="oi oi-ban h5" style="color:brown;"></i>
                            }
                            else if (item.Status == "T")
                            {
                                <i class="oi oi-circle-check h5" style="color:green;"></i>
                            }
                        </td>
                        <td hidden>@item.Auditor</td>
                        <td hidden>@item.Photo</td>
                        <td>
                            @if (item.Deleted == "T")
                            {
                                <i class="oi oi-trash h5" style="color:brown;"></i>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<ToastNotification IsOpen="@Toast.IsOpen" Text="@Toast.RenderText" Level="@Toast.Level"></ToastNotification>
@if (IsModalOpen)
{
    <ModalOffender IdUser="@IdUser" Row="@Row" Title="@Title" Role="@Role" OnClose="@CloseModal"></ModalOffender>
}
<ModalDialog IsOpen="@IsModalDialogOpen" Title="@Title" Text="@RenderText" OnClose="@CloseModal"></ModalDialog>
@code {
    private bool IsModalOpen { get; set; }
    private bool IsModalDialogOpen { get; set; }
    private bool IsHide { get; set; }
    private bool IsDisabled { get; set; } = true;
    private bool IsNotFocused { get; set; } = true;
    private bool IsDeleted { get; set; }
    private string SearchRequest { get; set; }
    private bool IsRoleOperator { get; set; }
    private bool IsRoleAdminOrAuditor { get; set; }
    private int IdUser { get; set; }
    private List<OffendersModel> Table { get; set; }
    private OffendersModel Row { get; set; }
    private decimal SelectedId { get; set; }
    private string VisibleDel { get; set; } = "visible";
    private string VisibleRec { get; set; } = "invisible";
    private string Grpprg { get; set; }
    private string Role { get; set; }
    private string Title { get; set; }
    private RenderFragment RenderText { get; set; }
    private string SearchValue { get; set; }
    OffendersModel oModel = new();
    [CascadingParameter] public MainLayout Layout { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthStat { get; set; }
    public ElementReference Reference { get; set; }
    protected async override Task OnInitializedAsync()
    {
        Layout.Title = "Данные по нарушителям";
        Layout.Page = this;
        var auth = await AuthStat;
        Layout.Login = auth.User.FindFirstValue(ClaimTypes.Name);
        oModel.Layout = Layout;
        Role = auth.User.FindFirstValue(ClaimTypes.Role);
        IdUser = Convert.ToInt32(auth.User.FindFirstValue(ClaimTypes.NameIdentifier));

        IsHide = Role == "MANAG" ? true : false;
        IsRoleOperator = Role == "OPERR" || Role == "MANAG" ? true : false;
        IsRoleAdminOrAuditor = Role == "ADMIN" || Role == "MGKRO" ? true : false;
        await Task.Run(RefreshTable);
    }
    private void Reverse() { IsDeleted = !IsDeleted; RefreshTable(); }
    private void RefreshTable()
    {
        oModel.Loginid = IdUser;
        Grpprg = oModel.GetGrpprg();
        Table = oModel.GetDataOffenders(IsDeleted, IsRoleOperator);
    }
    private void KeyPress(KeyboardEventArgs e) { if (e.Code == "Enter") Search(SearchRequest, e.Code); }/// Поиск начинается после нажатия на Enter
    private void FilterTable(ChangeEventArgs e) { Search(e.Value.ToString()); }
    private void Search(string filter, string pressed = null)/// Поиск
    {
        filter = filter.Length < 2 ? string.Empty : filter;/// Минимальная длинна поиска - 2 символа
        if (pressed == "Enter")
            filter += ' ';
        oModel.Loginid = IdUser;
        Grpprg = oModel.GetGrpprg();
        if (filter.LastIndexOf(' ') == filter.Length - 1)/// Поиск начинается после нажатия на пробел
            if (string.IsNullOrWhiteSpace(filter))
            {
                SearchValue = null;
                Table = oModel.GetDataOffenders(false, IsRoleOperator, string.Empty);
            }
            else
                Table = oModel.GetDataOffenders(false, false, filter);
        SearchRequest = filter;
    }
    private void RowClicked(decimal id)
    {
        SelectedId = id;
        IsNotFocused = (id == SelectedId) ? false : true;
        Row = oModel.GetDataOffenders(IsDeleted, false, string.Empty, SelectedId)[0];
        if (IsRoleOperator & Row.Status == "U" & Grpprg == Row.Grpprg || IsRoleAdminOrAuditor)/// Операции с записями возможны в случае, когда Статус = "НЕ ОПРЕДЕЛЕНО" и только в своем подразделении (Для OPERR и MANAG)
        {
            IsDisabled = false;
            if (Row.Deleted == "F") { VisibleDel = "visible"; VisibleRec = "invisible"; }
            else { VisibleDel = "invisible"; VisibleRec = "visible"; }
        }
        else { IsDisabled = true; }
    }
    public void Add()
    {
        if (!IsModalOpen && !IsHide)
        {
            SetModalSettings(ModeButton.Add, "Добавление нарушителя");
        }
    }
    public void View()
    {
        if (!IsModalOpen && SelectedId > 0 && !IsNotFocused)
        {
            SetModalSettings(ModeButton.View, "Карточка нарушителя");
        }
    }
    public void Edit()
    {
        if (!IsModalOpen && SelectedId > 0 && !IsDisabled)
        {
            SetModalSettings(ModeButton.Edit, "Редактирование");
        }
    }
    public void Delete()
    {
        if (Row == null) return;
        if (!IsModalOpen && SelectedId > 0 && !IsDisabled && VisibleDel == "visible")
        {
            SetModalDialogSettings(ModeButton.MarkDelRec, "Внимание!", @<span>Вы действительно хотие удалить?<br />@Row.Employee</span>, "T");
        }
    }
    public void Recovery()
    {
        if (Row == null) return;
        if (!IsModalOpen && SelectedId > 0 && !IsDisabled && VisibleRec == "visible")
        {
            SetModalDialogSettings(ModeButton.MarkDelRec, "Внимание!", @<span>Вы действительно хотие восстановить?<br />@Row.Dol</span>, "F");
        }
    }
    private void SetModalSettings(ModeButton mode, string title)
    {
        IsModalOpen = true;
        Mode.Button = mode;
        Title = title;
    }
    private void SetModalDialogSettings(ModeButton mode, string title, RenderFragment renderText, string deleted = null)
    {
        Mode.Button = mode;
        IsModalDialogOpen = true;
        Title = title;
        RenderText = renderText;
        oModel.Id = SelectedId;
        oModel.Deleted = deleted;
    }
    private void ExportExcel() { ExcelModel excelModel = new(); excelModel.GenerateOffendersExcel(JS, Table, Layout.Title); }
    private async Task CloseModal(bool accepted)
    {
        if (accepted)
        {
            if (Mode.Button == ModeButton.MarkDelRec || Mode.Button == ModeButton.Delete)
            {
                oModel.DeleteOrRecovery();
            }
            RefreshTable();
            IsModalDialogOpen = false;
            IsModalOpen = false;
            await Toast.Notification(@<span>Карточка успешно сохранена!</span>, ToastLevel.Success);
        }
        else
        {
            IsModalDialogOpen = false;
            IsModalOpen = false;
        }
        await Task.Run(() => Reference.FocusAsync());
        StateHasChanged();
    }
}
