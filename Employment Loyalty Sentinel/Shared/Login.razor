@inject IJSRuntime js;
@inject AuthenticationStateProvider _tokenAuthStateProvider;
@inject NavigationManager NavigationManager


<div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col col-md-10 col-xl-8">
            <div class="card" style="border-radius: 1rem;">
                <div class="row g-0">
                    <div class="col-md-6 col-lg-5 d-none d-md-block">
                        <img src="./images/login_fone.jpg" alt="login form" class="img-fluid" style="border-radius: 1rem 0 0 1rem;" />
                    </div>
                    <div class="col-md-6 col-lg-7 d-flex flex-column align-items-center" style="background-image: linear-gradient(180deg, rgb(251 255 182 / 44%) 0%, #d7ffe261 70%);">
                        <div class="card-body my-5 p-4 p-lg-5 text-black">
                            <h1>Вход в систему</h1>
                            <EditForm Model="model" OnValidSubmit="@Authenticate">
                                <DataAnnotationsValidator />
                                <fieldset>
                                    <label>Имя пользователя</label>
                                    <InputText type="text" class="mb-2 form-control form-control-lg" @bind-Value="model.UserName"></InputText>
                                    <ValidationMessage For="()=>model.UserName" />

                                    <label>Пароль</label>
                                    <InputText type="password" class="mb-2 form-control form-control-lg" @bind-Value="model.Password"></InputText>
                                    <ValidationMessage For="()=>model.Password" />
                                    <button type="submit" class="btn btn-primary btn-lg btn-block">Вход</button>
                                </fieldset>
                            </EditForm>
                        </div>
                        <span class="float-end">Версия: @EmploymentLoyaltySentinel.Version.Ver</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<ToastNotification IsOpen="@Toast.IsOpen" Text="@Toast.RenderText" Level="@Toast.Level"></ToastNotification>
@code {
    private class Model
    {
        [Required(ErrorMessage = "Поле не должно быть пустым!")]
        public string UserName { get; set; }
        [Required(ErrorMessage = "Поле не должно быть пустым!")]
        public string Password { get; set; }
    }
    private Model model = new Model();
    UserAccountService accountService = new();
    UserModel uModel = new();
    private async Task Authenticate()
    {
        UserAccount user = accountService.GetByUserName(model.UserName);
        string password = uModel.HashPassword(model.Password);
        if (user == null || user.Password != password)
        {
            //await js.InvokeVoidAsync("alert", "Пользователь не найден или не верен пароль!");
            await Toast.Notification(@<span>Пользователь не найден или не верен пароль!</span>, ToastLevel.Error);
            return;
        }
        if (user.Deleted == "T")
        {
            //await js.InvokeVoidAsync("alert", "Пользователь удален!");
            await Toast.Notification(@<span>Пользователь удален!</span>, ToastLevel.Info);
            return;
        }

        var customAuth = (Authentication)_tokenAuthStateProvider;
        await customAuth.UpdateAuthenticationState(new UserSession()
            {
                UserName = user.UserName,
                Role = user.Role,
                Id = user.Id,
            });
        NavigationManager.NavigateTo("./offenders");
    } 
}